#!/usr/bin/env python3

# @usage: vm [+/-/.]
#            + <arg>: <centos>, <fedora>, <debian>, <ubuntu>, <windows>
#            - <arg>: <machine_name>
# @brief Generates vagrant-based virtual test systems


from sys import argv
import os
import time


def usage():
    print('\nUsage: vm [+/-/.]')
    print('+ centos/fedora/debian/ubuntu/windows')
    print('- machine_name')


def get_box(os):
    if os.lower() == 'fedora':
        return('  config.vm.box = "fedora/24-cloud-base"\n'
               + '  config.vm.provision "shell", inline: <<-SHELL\n'
               + '    sudo dnf install -y python-pip\n'
               + '    sudo dnf install -y vim\n'
               + '    sudo pip install pytest\n'
               + '    cp /vagrant/bashrc-fedora /home/vagrant/.bashrc\n'
               + '  SHELL\n')
    elif os.lower() == 'centos':
        return('  config.vm.box = "centos/7"\n'
               + '  config.vm.provision "shell", inline: <<-SHELL\n'
               + '    sudo yum install -y epel-release\n'
               + '    sudo yum install -y python-pip\n'
               + '    sudo yum install -y vim\n'
               + '    sudo pip install pytest\n'
               + '    cp /vagrant/bashrc-centos /home/vagrant/.bashrc\n'
               + '  SHELL\n')
    elif os.lower() == 'ubuntu':
        return('  config.vm.box = "bento/ubuntu-16.04"\n'
               + '  config.vm.provision "shell", inline: <<-SHELL\n'
               + '    sudo apt-get install -y vim\n'
               + '    sudo apt-get install -y python-pip\n'
               + '    sudo pip install pytest\n'
               + '    cp /vagrant/bashrc-ubuntu /home/vagrant/.bashrc\n'
               + '  SHELL\n')
    elif os.lower() == 'debian':
        return('  config.vm.box = "debian/jessie64"\n'
               + '  config.vm.provision "shell", inline: <<-SHELL\n'
               + '    sudo apt-get install -y python-pip\n'
               + '    sudo apt-get install -y vim\n'
               + '    sudo pip install pytest\n'
               + '    cp /vagrant/bashrc-debian /home/vagrant/.bashrc\n'
               + '  SHELL\n')
    else:
        pass


def setup_system(os_name):
    vm_dir = os_name.lower() + '_' + str(int(time.time()))
    os.chdir(os.path.expanduser('~') + '/.vm')
    os.mkdir(vm_dir)
    os.chdir(vm_dir)
    # files copied into the vm can be found in the /vagrant directory
    #os.system('cp ' + os.path.expanduser('~') + '/Repositories/vm-bashrc/* .')
    #os.system('cp ' + os.path.expanduser('~') + '/Builds/* .')
    #os.system('cp -r ' + os.path.expanduser('~') + '/Repositories/OEMValidation/* .')
    #os.system('cp -r ' + os.path.expanduser('~') + '/Repositories/EngineUtils bin')
    #os.system('cp -r ' + os.path.expanduser('~') + '/TestFiles .')
    # generate vagrantfile
    with open("Vagrantfile", "w") as vagrantfile:
        vagrantfile.write('Vagrant.configure(2) do |config|\n')
        vagrantfile.write(get_box(os_name.lower()))
        vagrantfile.write('  config.ssh.insert_key = false\n')
        vagrantfile.write('end\n')
    os.system('vagrant box update')
    os.system('vagrant up')
    os.system('vagrant ssh')


def teardown_system(vm):
    os.chdir(os.path.expanduser('~') + '/.vm/' + vm)
    os.system('vagrant destroy -f')
    os.getcwd()
    os.chdir('..')
    os.system('rm -rf ' + vm)


try:
    command = argv[1]
    command.lower()
    if command == '+':
        try:
            setup_system(argv[2])
        except IOError:
            usage()
            print('command: ' + command)
    elif command == '-':
        try:
            teardown_system(argv[2])
        except IOError:
            usage()
            print('command: ' + command)
    elif command == '.':
        try:
            for i in os.listdir(os.path.expanduser('~') + '/.vm'):
                print(i)
        except OSError:
            pass
    else:
        usage()
except IndexError:
    usage()
except OSError:
    usage()
