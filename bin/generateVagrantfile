#!/usr/bin/env python

## @file generateVagrantfile
## @brief Generates Vagrantfiles for building vagrant-based test systems


from time import time
from sys import argv
import os

def usage():
    print('Usage: CreateServer <os>')
    print('OS targets are: centos6.7, centos, debian, ubuntu, windows')

def get_box(os):
    if os == 'centos6.7':
        print('  config.vm.box = "bento/centos-6.7"')
        platform('rpm')
    elif os == 'centos':
        print('  config.vm.box = "centos/7"')
        platform('rpm')
    elif os == 'debian':
        print('  config.vm.box = "debian/jessie64"')
        platform('dpkg')
    elif os == 'ubuntu':
        print('  config.vm.box = "ubuntu/trusty64"')
        platform('dpkg')
    elif os == 'fedora':
        print('  config.vm.box = "fedora/24-cloud-base"')
        platform('rpm')
    elif os == 'windows':
        print('  config.vm.box = "mwrock/Windows2012R2"')
    else:
        usage()

def platform(pkg):
    if pkg == 'dpkg':
        print('  config.vm.provision "shell", inline: <<-SHELL')
        print('    sudo apt-get update')
        print('    sudo apt-get install -y python-pip')
        print('    sudo pip install pytest')
        # print('    echo export BUILD="' + myBUILD + '" >> .bashrc')
        print('  SHELL')
    elif pkg == 'rpm':
        print('  config.vm.provision "shell", inline: <<-SHELL')
        print('    sudo yum install -y epel-release')
        print('    sudo yum install -y python-pip')
        print('    sudo pip install pytest')
        # print('    echo export BUILD="' + myBUILD + '" >> .bashrc')
        print('  SHELL')
    else:
        print
    pass

try:
    INPUT = argv[1]
    INPUT.lower()
    print('Vagrant.configure(2) do |config|')
    get_box(argv[1])
    print('  config.ssh.insert_key = false')
    print('end')
except:
    usage()
