#!/usr/bin/env python

## @file smokeTest
## @brief Useful for validating test suites under development


from sys import argv
import os
import subprocess
from time import time

test_vm = 'smoke_test_' + str(time()).split('.')[0]

def get_file_version():
    mydir = os.listdir(os.path.expanduser('~') + '/Builds')
    for i in mydir:
        if i.split('_amd64'[0])[1].split('-')[0] == '0.7.0':
            version = i.split('_')[1]
        else:
            version = '1.2.3-456'
    return version

BUILD = get_file_version()

def usage():
    print('./smokeTest [test_suite.py]')


def setup_system():
    os.chdir(os.path.expanduser('~') + '/.vm')
    os.mkdir(test_vm)
    os.chdir(test_vm)
    # copy test artifacts into the vm share directory
    os.system('cp ' + os.path.expanduser('~') + '/Builds/* .')
    os.system('cp -r ' + os.path.expanduser('~') + '/Repositories/OEMValidation/* .')
    # os.system('cp -r ' + os.path.expanduser('~') + '/Repositories/EngineUtils bin')
    # write Vagrantfile
    with open("Vagrantfile", "w") as vagrantfile:
        vagrantfile.write('Vagrant.configure(2) do |config|\n')
        vagrantfile.write('  config.vm.box = "bento/ubuntu-16.04"\n')
        vagrantfile.write('  config.vm.provision "shell", inline: <<-SHELL\n')
        vagrantfile.write('    sudo apt-get install -y python-pip\n')
        vagrantfile.write('    sudo pip install pytest\n')
        vagrantfile.write('  SHELL\n')
        vagrantfile.write('  config.ssh.insert_key = false\n')
        vagrantfile.write('end\n')
    # start up the vm
    os.system('vagrant box update > /dev/null')
    os.system('vagrant up > /dev/null')

def teardown_system(test_vm):
    os.chdir(os.path.expanduser('~') + '/.vm')
    os.chdir(test_vm)
    os.system('vagrant destroy -f > /dev/null')
    os.getcwd()
    os.chdir('..')
    os.system('rm -rf ' + test_vm)

def run_tests():
    #os.system("vagrant ssh -c 'cd /vagrant; py.test -v '" + argv[1] + " 2> /dev/null | grep '::'")
    os.system("vagrant ssh -c 'cd /vagrant; py.test -v '" + argv[1])

try:
    #print('\n'+u'\U0001f3d7'.encode('utf-8')+'  '+BUILD+u'\U0001f6ac'.encode('utf-8')+'  '+argv[1])
    print('\n'+u'\U0001f525'.encode('utf-8')+'  '+argv[1])
    #print('\n'+u'\U0001f6e0'.encode('utf-8')+'  '+argv[1])
    setup_system()
    run_tests()
    teardown_system(test_vm)
except IndexError:
    usage()
